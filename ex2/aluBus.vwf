/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 100.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("ALU_bus")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("cn")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("d")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("d[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("d[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "d";
}

SIGNAL("k")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("k[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("lddr1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("lddr2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ldr4")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("ldr5")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("m")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("r4_bus")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("r5_bus")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("s")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("s[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "s";
}

SIGNAL("s[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "s";
}

SIGNAL("s[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "s";
}

SIGNAL("s[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "s";
}

SIGNAL("sw_bus")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("d[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

GROUP("sw|r4|r5|alu_bus")
{
	MEMBERS = "sw_bus", "r4_bus", "r5_bus", "ALU_bus";
}

GROUP("ld_r1|r2|r4|r5")
{
	MEMBERS = "lddr1", "lddr2", "ldr4", "ldr5";
}

GROUP("m|cn")
{
	MEMBERS = "m", "cn";
}

GROUP("d~result")
{
	MEMBERS = "d[7]~result", "d[6]~result", "d[5]~result", "d[4]~result", "d[3]~result", "d[2]~result", "d[1]~result", "d[0]~result";
}

TRANSITION_LIST("ALU_bus")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 150.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("Clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 20;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
		}
	}
}

TRANSITION_LIST("cn")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 650.0;
	}
}

TRANSITION_LIST("d[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("d[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1000.0;
	}
}

TRANSITION_LIST("k[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("k[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("k[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("k[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("k[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 850.0;
	}
}

TRANSITION_LIST("k[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 900.0;
	}
}

TRANSITION_LIST("k[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 850.0;
	}
}

TRANSITION_LIST("k[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 900.0;
	}
}

TRANSITION_LIST("lddr1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("lddr2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("ldr4")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("ldr5")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("m")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 750.0;
	}
}

TRANSITION_LIST("r4_bus")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 350.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("r5_bus")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 150.0;
	}
}

TRANSITION_LIST("s[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 200.0;
	}
}

TRANSITION_LIST("s[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 450.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("s[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("s[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("sw_bus")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("d[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 58.255;
		LEVEL 0 FOR 1.757;
		LEVEL 1 FOR 48.401;
		LEVEL 0 FOR 49.074;
		LEVEL Z FOR 1.428;
		LEVEL 0 FOR 2.884;
		LEVEL 1 FOR 50.183;
		LEVEL 0 FOR 46.165;
		LEVEL Z FOR 1.256;
		LEVEL 0 FOR 2.446;
		LEVEL 1 FOR 49.517;
		LEVEL 0 FOR 0.583;
		LEVEL 1 FOR 46.198;
		LEVEL Z FOR 1.256;
		LEVEL 1 FOR 1.958;
		LEVEL 0 FOR 0.488;
		LEVEL 1 FOR 49.271;
		LEVEL 0 FOR 46.778;
		LEVEL Z FOR 1.017;
		LEVEL 0 FOR 4.577;
		LEVEL 1 FOR 94.655;
		LEVEL Z FOR 50.768;
		LEVEL X FOR 1.55;
		LEVEL 0 FOR 0.896;
		LEVEL X FOR 146.537;
		LEVEL Z FOR 1.505;
		LEVEL X FOR 0.372;
		LEVEL 0 FOR 0.607;
		LEVEL X FOR 0.738;
		LEVEL 0 FOR 0.729;
		LEVEL 1 FOR 96.786;
		LEVEL Z FOR 49.62;
		LEVEL X FOR 1.757;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 8.542;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 6.54;
	}
}

TRANSITION_LIST("d[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 57.898;
		LEVEL 0 FOR 50.967;
		LEVEL 1 FOR 48.517;
		LEVEL Z FOR 1.176;
		LEVEL 1 FOR 0.307;
		LEVEL 0 FOR 0.307;
		LEVEL 1 FOR 3.638;
		LEVEL 0 FOR 0.313;
		LEVEL 1 FOR 0.3;
		LEVEL 0 FOR 0.209;
		LEVEL 1 FOR 48.179;
		LEVEL 0 FOR 2.117;
		LEVEL 1 FOR 44.114;
		LEVEL Z FOR 1.004;
		LEVEL 1 FOR 1.841;
		LEVEL 0 FOR 0.368;
		LEVEL 1 FOR 49.87;
		LEVEL 0 FOR 0.293;
		LEVEL 1 FOR 0.425;
		LEVEL 0 FOR 0.075;
		LEVEL 1 FOR 0.671;
		LEVEL 0 FOR 45.453;
		LEVEL Z FOR 1.004;
		LEVEL 0 FOR 52.429;
		LEVEL 1 FOR 46.318;
		LEVEL Z FOR 0.765;
		LEVEL 1 FOR 2.048;
		LEVEL 0 FOR 0.281;
		LEVEL 1 FOR 49.719;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 0.368;
			LEVEL 1 FOR 8.456;
		}
		LEVEL 0 FOR 0.368;
		LEVEL 1 FOR 2.948;
		LEVEL Z FOR 50.516;
		LEVEL X FOR 4.656;
		LEVEL 1 FOR 0.409;
		LEVEL X FOR 46.574;
		NODE
		{
			REPEAT = 11;
			LEVEL 0 FOR 0.368;
			LEVEL X FOR 8.456;
		}
		LEVEL 0 FOR 0.368;
		LEVEL X FOR 0.164;
		LEVEL Z FOR 1.253;
		LEVEL X FOR 1.418;
		LEVEL 1 FOR 0.415;
		LEVEL 0 FOR 0.293;
		LEVEL X FOR 0.436;
		LEVEL 1 FOR 48.856;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 0.293;
			LEVEL 1 FOR 8.531;
		}
		LEVEL 0 FOR 0.293;
		LEVEL 1 FOR 3.653;
		LEVEL Z FOR 49.368;
		LEVEL X FOR 1.274;
		NODE
		{
			REPEAT = 10;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 8.167;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 1.931;
	}
}

TRANSITION_LIST("d[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 58.255;
		LEVEL 0 FOR 1.492;
		LEVEL 1 FOR 48.804;
		LEVEL 0 FOR 48.936;
		LEVEL Z FOR 1.428;
		LEVEL 0 FOR 2.433;
		LEVEL 1 FOR 1.278;
		LEVEL 0 FOR 0.301;
		LEVEL 1 FOR 49.18;
		LEVEL 0 FOR 46.04;
		LEVEL Z FOR 1.256;
		LEVEL 0 FOR 2.591;
		LEVEL 1 FOR 49.317;
		LEVEL 0 FOR 0.2;
		LEVEL 1 FOR 0.425;
		LEVEL 0 FOR 0.278;
		LEVEL 1 FOR 0.713;
		LEVEL 0 FOR 45.22;
		LEVEL Z FOR 1.256;
		LEVEL 0 FOR 98.495;
		LEVEL Z FOR 1.017;
		LEVEL 0 FOR 3.938;
		LEVEL 1 FOR 95.294;
		LEVEL Z FOR 50.768;
		LEVEL X FOR 3.644;
		LEVEL 1 FOR 0.387;
		LEVEL X FOR 144.952;
		LEVEL Z FOR 1.505;
		LEVEL X FOR 2.591;
		LEVEL 1 FOR 48.203;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 0.653;
			LEVEL 1 FOR 8.617;
		}
		LEVEL 0 FOR 0.653;
		LEVEL 1 FOR 1.435;
		LEVEL Z FOR 49.62;
		LEVEL X FOR 1.492;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 8.613;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 6.166;
	}
}

TRANSITION_LIST("d[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 59.117;
		LEVEL 0 FOR 50.578;
		LEVEL 1 FOR 48.654;
		LEVEL Z FOR 1.346;
		LEVEL 0 FOR 0.089;
		LEVEL 1 FOR 2.092;
		LEVEL 0 FOR 1.479;
		LEVEL 1 FOR 0.931;
		LEVEL 0 FOR 0.313;
		LEVEL 1 FOR 48.649;
		LEVEL 0 FOR 2.806;
		LEVEL 1 FOR 42.955;
		LEVEL Z FOR 1.256;
		LEVEL 1 FOR 0.721;
		LEVEL 0 FOR 0.581;
		LEVEL 1 FOR 49.517;
		LEVEL 0 FOR 0.955;
		LEVEL 1 FOR 0.425;
		LEVEL 0 FOR 0.891;
		LEVEL 1 FOR 0.671;
		LEVEL 0 FOR 0.26;
		LEVEL 1 FOR 0.313;
		LEVEL 0 FOR 0.632;
		LEVEL 1 FOR 43.778;
		LEVEL Z FOR 1.256;
		LEVEL 1 FOR 0.721;
		LEVEL 0 FOR 0.581;
		LEVEL 1 FOR 49.271;
		LEVEL 0 FOR 0.729;
		LEVEL 1 FOR 47.193;
		LEVEL Z FOR 1.017;
		LEVEL 1 FOR 50.928;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 0.89;
			LEVEL 1 FOR 9.712;
		}
		LEVEL 0 FOR 0.89;
		LEVEL 1 FOR 5.006;
		LEVEL Z FOR 50.768;
		LEVEL X FOR 4.882;
		LEVEL 1 FOR 0.806;
		LEVEL X FOR 44.831;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 0.89;
			LEVEL X FOR 9.712;
		}
		LEVEL 0 FOR 0.89;
		LEVEL X FOR 2.156;
		LEVEL Z FOR 1.505;
		LEVEL X FOR 0.158;
		LEVEL 1 FOR 0.415;
		LEVEL X FOR 0.348;
		LEVEL 0 FOR 0.381;
		LEVEL 1 FOR 48.856;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 0.955;
			LEVEL 1 FOR 9.647;
		}
		LEVEL 0 FOR 0.955;
		LEVEL 1 FOR 5.711;
		LEVEL Z FOR 49.62;
		LEVEL X FOR 0.667;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 9.945;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 4.743;
	}
}

TRANSITION_LIST("d[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 57.817;
		LEVEL 0 FOR 99.484;
		LEVEL Z FOR 1.176;
		LEVEL 0 FOR 2.446;
		LEVEL 1 FOR 0.109;
		LEVEL 0 FOR 49.222;
		LEVEL 1 FOR 1.64;
		LEVEL 0 FOR 0.465;
		LEVEL 1 FOR 0.266;
		LEVEL 0 FOR 45.336;
		LEVEL Z FOR 1.004;
		LEVEL 0 FOR 51.062;
		LEVEL 1 FOR 0.243;
		LEVEL 0 FOR 0.315;
		LEVEL 1 FOR 0.501;
		LEVEL 0 FOR 0.425;
		LEVEL 1 FOR 46.45;
		LEVEL Z FOR 1.004;
		LEVEL 1 FOR 52.604;
		LEVEL 0 FOR 46.143;
		LEVEL Z FOR 0.765;
		LEVEL 0 FOR 1.304;
		LEVEL 1 FOR 1.059;
		LEVEL 0 FOR 0.083;
		LEVEL 1 FOR 2.124;
		LEVEL 0 FOR 94.914;
		LEVEL Z FOR 50.516;
		LEVEL X FOR 149.235;
		LEVEL Z FOR 1.253;
		LEVEL X FOR 1.545;
		LEVEL 0 FOR 0.33;
		LEVEL X FOR 0.729;
		LEVEL 0 FOR 47.797;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 1.059;
			LEVEL 0 FOR 7.418;
		}
		LEVEL 1 FOR 1.059;
		LEVEL 0 FOR 5.639;
		LEVEL Z FOR 49.368;
		LEVEL X FOR 1.372;
		NODE
		{
			REPEAT = 10;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 7.82;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 5.384;
	}
}

TRANSITION_LIST("d[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 58.97;
		LEVEL 0 FOR 99.484;
		LEVEL Z FOR 1.176;
		LEVEL 0 FOR 3.388;
		LEVEL 1 FOR 0.67;
		LEVEL 0 FOR 49.223;
		LEVEL 1 FOR 0.919;
		LEVEL 0 FOR 45.284;
		LEVEL Z FOR 1.004;
		LEVEL 0 FOR 52.9;
		LEVEL 1 FOR 0.67;
		LEVEL 0 FOR 45.426;
		LEVEL Z FOR 1.004;
		LEVEL 0 FOR 98.747;
		LEVEL Z FOR 0.765;
		LEVEL 0 FOR 4.269;
		LEVEL 1 FOR 1.09;
		LEVEL 0 FOR 94.125;
		LEVEL Z FOR 50.516;
		LEVEL X FOR 51.238;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 0.809;
			LEVEL X FOR 9.512;
		}
		LEVEL 0 FOR 0.809;
		LEVEL X FOR 4.299;
		LEVEL Z FOR 1.253;
		LEVEL X FOR 1.559;
		LEVEL 0 FOR 0.607;
		LEVEL X FOR 0.729;
		LEVEL 0 FOR 96.589;
		LEVEL Z FOR 49.368;
		LEVEL X FOR 1.663;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 9.664;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 6.142;
	}
}

TRANSITION_LIST("d[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 57.854;
		LEVEL 0 FOR 99.513;
		LEVEL Z FOR 1.147;
		LEVEL 0 FOR 3.807;
		LEVEL 1 FOR 0.626;
		LEVEL 0 FOR 47.393;
		LEVEL 1 FOR 1.519;
		LEVEL 0 FOR 46.168;
		LEVEL Z FOR 0.975;
		LEVEL 0 FOR 99.025;
		LEVEL Z FOR 0.975;
		LEVEL 0 FOR 98.776;
		LEVEL Z FOR 0.736;
		LEVEL 0 FOR 2.468;
		LEVEL 1 FOR 1.479;
		LEVEL 0 FOR 95.566;
		LEVEL Z FOR 50.487;
		LEVEL X FOR 149.264;
		LEVEL Z FOR 1.224;
		LEVEL X FOR 0.347;
		LEVEL 0 FOR 0.625;
		LEVEL X FOR 0.729;
		LEVEL 0 FOR 97.812;
		LEVEL Z FOR 49.339;
		LEVEL X FOR 1.75;
		NODE
		{
			REPEAT = 10;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 7.638;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 6.789;
	}
}

TRANSITION_LIST("d[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 58.947;
		LEVEL 0 FOR 99.484;
		LEVEL Z FOR 1.176;
		LEVEL 0 FOR 2.239;
		LEVEL 1 FOR 0.313;
		LEVEL 0 FOR 48.664;
		LEVEL 1 FOR 0.434;
		LEVEL 0 FOR 47.834;
		LEVEL Z FOR 1.004;
		LEVEL 0 FOR 98.996;
		LEVEL Z FOR 1.004;
		LEVEL 0 FOR 98.747;
		LEVEL Z FOR 0.765;
		LEVEL 0 FOR 2.404;
		LEVEL 1 FOR 0.755;
		LEVEL 0 FOR 96.325;
		LEVEL Z FOR 50.516;
		LEVEL X FOR 50.227;
		NODE
		{
			REPEAT = 10;
			LEVEL 0 FOR 0.856;
			LEVEL X FOR 8.265;
		}
		LEVEL 0 FOR 0.856;
		LEVEL X FOR 6.942;
		LEVEL Z FOR 1.253;
		LEVEL X FOR 0.148;
		LEVEL 0 FOR 1.054;
		LEVEL X FOR 0.729;
		LEVEL 0 FOR 97.553;
		LEVEL Z FOR 49.368;
		LEVEL X FOR 1.081;
		NODE
		{
			REPEAT = 9;
			LEVEL 0 FOR 0.657;
			LEVEL X FOR 8.464;
		}
		LEVEL 0 FOR 0.657;
		LEVEL X FOR 7.226;
	}
}

DISPLAY_LINE
{
	CHANNEL = "Clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "k";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "k[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "sw|r4|r5|alu_bus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	CHILDREN = 11, 12, 13, 14;
}

DISPLAY_LINE
{
	CHANNEL = "sw_bus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "r4_bus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "r5_bus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "ALU_bus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "ld_r1|r2|r4|r5";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
	CHILDREN = 16, 17, 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "lddr1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "lddr2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "ldr4";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "ldr5";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "m|cn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
	CHILDREN = 21, 22;
}

DISPLAY_LINE
{
	CHANNEL = "m";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "cn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "s";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
	CHILDREN = 24, 25, 26, 27;
}

DISPLAY_LINE
{
	CHANNEL = "s[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "s[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "s[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "s[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "d";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
	CHILDREN = 29, 30, 31, 32, 33, 34, 35, 36;
}

DISPLAY_LINE
{
	CHANNEL = "d[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 28;
}

DISPLAY_LINE
{
	CHANNEL = "d~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 37;
	TREE_LEVEL = 0;
	CHILDREN = 38, 39, 40, 41, 42, 43, 44, 45;
}

DISPLAY_LINE
{
	CHANNEL = "d[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "d[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 37;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity aluBus is
    port( Clk: in STD_LOGIC;
          sw_bus,r4_bus,r5_bus,ALU_bus:in STD_LOGIC;
          lddr1,lddr2,ldr4,ldr5:in STD_LOGIC;
          m, cn:in STD_LOGIC; 
          s:in STD_LOGIC_VECTOR(3 downto 0);
          k:in STD_LOGIC_VECTOR(7 downto 0);
          d:inout STD_LOGIC_VECTOR(7 downto 0));
end aluBus;

architecture aluBus of aluBus is
    signal dr1,dr2,r4,r5,aluout,bus_Reg:STD_LOGIC_VECTOR(7 downto 0);
    signal sel:STD_LOGIC_VECTOR(5 downto 0);
    begin
    ldreg:process(Clk,lddr1,lddr2,ldr4,ldr5,bus_Reg)
        begin
            if Clk'event and Clk ='1'then
                if lddr1='1'then dr1<= bus_Reg; 
                elsif lddr2 ='1'then dr2<= bus_Reg; 
                elsif ldr4='1'then r4<= bus_Reg; 
                elsif ldr5 ='1'then r5<= bus_Reg; 
                end if; 
            end if; 
        end process;
    ALU:process(m, cn, s, dr1,dr2,sel,aluout)
        begin
            sel <= m & cn & s; 
            case sel is
                when "000000" => aluout <= dr1 +1; 
                when "011001" => aluout <= dr1+dr2;
                when "100010" => aluout <= (not dr1)and dr2;
                when "000110" => aluout <= dr1- dr2; 
                when others => aluout <=x"ff";
            end case;
        end process;
    bus_Reg<=k when (sw_bus='0'and r4_bus='1'and r5_bus ='1'and ALU_bus='1') else
             r4 when (sw_bus='1'and r4_bus='0'and r5_bus='1'and ALU_bus='1') else
             r5 when (sw_bus='1'and r4_bus='1'and r5_bus='0'and ALU_bus='1') else
             aluout when (sw_bus='1'and r4_bus='1'and r5_bus='1'and ALU_bus='0') else
             d;
    d<=bus_Reg when (sw_bus='0'or r4_bus='0'or r5_bus='0'or ALU_bus ='0')else
        (others=>'Z');
    end aluBus;


